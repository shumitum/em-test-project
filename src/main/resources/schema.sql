
drop table if exists tasks;
drop table if exists comments;
drop table if exists users;

create table if not exists users
(
    user_id integer generated by default as identity,
    name        varchar(20) not null,
    position    varchar(30) not null,
    email       varchar(50) not null,
    password    varchar(254) not null,
    role        varchar(20) not null,
    constraint users_pk primary key (user_id),
    unique (email)
);

insert into users (name, position, email, password, role)
values
('Junior', 'DEV_JUNIOR', 'mail@mail.com', '$2a$12$vvyPgGAIbAimA/a1ShcKQubp/DlKmmspN/CaUA4CQq7K84PoaLSam', 'EXECUTOR'),
('David', 'DEV_SENIOR', 'user@user.com', '$2a$12$vvyPgGAIbAimA/a1ShcKQubp/DlKmmspN/CaUA4CQq7K84PoaLSam', 'MANAGER');

create table if not exists tasks
(
    task_id     integer generated by default as identity,
    header      varchar(50) not null,
    description varchar(1000) not null,
    status      varchar(50) not null,
    priority    varchar(50) not null,
    author_id   integer not null,
    executor_id integer not null,
    constraint tasks_pk primary key (task_id),
    constraint fk_tasks_to_users foreign key (author_id) references users (user_id) on delete cascade,
    constraint fk_executor_to_users foreign key (executor_id) references users (user_id) on delete cascade
);

create table if not exists comments
(
    comment_id integer generated by default as identity,
    text        varchar(1000) not null,
    author_id   integer not null,
    created     timestamp not null,
    constraint comments_pk primary key (comment_id),
    constraint fk_comments_to_users foreign key (author_id) references users (user_id) on delete cascade
);



--create table if not exists categories
--(
--    category_id bigint generated by default as identity,
--    name        varchar(50) not null,
--    constraint categories_pk primary key (category_id)
--);
--
--create table if not exists events
--(
--    event_id           bigint generated by default as identity,
--    annotation         varchar(2000) not null,
--    category_id        bigint        not null,
--    created_on         timestamp     not null,
--    confirmed_requests bigint,
--    description        varchar(7000) not null,
--    event_date         timestamp     not null,
--    initiator_id       bigint        not null,
--    lat                float         not null,
--    lon                float         not null,
--    paid               boolean       not null,
--    participant_limit  integer       not null,
--    published_on       timestamp,
--    request_moderation boolean       not null,
--    state              varchar(50)   not null,
--    title              varchar(120)  not null,
--    constraint events_pk primary key (event_id),
--    constraint fk_events_to_users foreign key (initiator_id) references users (user_id) on delete cascade,
--    constraint fk_events_to_categories foreign key (category_id) references categories (category_id) on delete cascade
--);
--
--create table if not exists requests
--(
--    request_id   bigint generated by default as identity,
--    event_id     bigint      not null,
--    requester_id bigint      not null,
--    status       varchar(50) not null,
--    created      timestamp   not null,
--    constraint requests_pk primary key (request_id),
--    constraint fk_requests_to_events foreign key (event_id) references events (event_id) on delete cascade,
--    constraint fk_requests_to_users foreign key (requester_id) references users (user_id) on delete cascade
--);