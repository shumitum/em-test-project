drop table if exists comments;
drop table if exists tasks;
drop table if exists users;

create table if not exists users
(
    user_id integer generated by default as identity,
    name        varchar(20) not null,
    position    varchar(30) not null,
    email       varchar(50) not null,
    password    varchar(254) not null,
    role        varchar(20) not null,
    constraint users_pk primary key (user_id),
    unique (email)
);

insert into users (name, position, email, password, role)
values
('Junior', 'DEV_JUNIOR', 'mail@mail.com', '$2a$12$vvyPgGAIbAimA/a1ShcKQubp/DlKmmspN/CaUA4CQq7K84PoaLSam', 'EXECUTOR'),
('David', 'DEV_SENIOR', 'user@user.com', '$2a$12$vvyPgGAIbAimA/a1ShcKQubp/DlKmmspN/CaUA4CQq7K84PoaLSam', 'MANAGER'),
('Maria', 'DEV_MIDDLE', 'user@mail.com', '$2a$12$vvyPgGAIbAimA/a1ShcKQubp/DlKmmspN/CaUA4CQq7K84PoaLSam', 'EXECUTOR');

create table if not exists tasks
(
    task_id     integer generated by default as identity,
    header      varchar(50) not null,
    description varchar(1000) not null,
    status      varchar(50) not null,
    priority    varchar(50) not null,
    author_id   integer not null,
    executor_id integer not null,
    constraint tasks_pk primary key (task_id),
    constraint fk_tasks_to_users foreign key (author_id) references users (user_id) on delete cascade,
    constraint fk_executor_to_users foreign key (executor_id) references users (user_id) on delete cascade
);

create table if not exists comments
(
    comment_id integer generated by default as identity,
    text        varchar(1000) not null,
    author_id   integer not null,
    task_id     integer not null,
    created     timestamp not null,
    constraint comments_pk primary key (comment_id),
    constraint fk_comments_to_users foreign key (author_id) references users (user_id) on delete cascade,
    constraint fk_comments_to_tasks foreign key (task_id) references tasks (task_id) on delete cascade
);